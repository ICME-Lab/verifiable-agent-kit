const axios = require('axios');
const { ethers } = require('ethers');
const fs = require('fs');

async function testEndToEndVerification() {
    console.log("üß™ Testing End-to-End Verification for All Proof Types");
    console.log("=" .repeat(60));
    
    const proofTypes = [
        { command: "Generate KYC proof", name: "KYC", expectedType: "1" },
        { command: "Prove location", name: "Location", expectedType: "2" },
        { command: "Prove AI content", name: "AI Content", expectedType: "3" }
    ];
    
    const results = [];
    
    for (const proofType of proofTypes) {
        console.log(`\nüìã Testing ${proofType.name} Proof`);
        console.log("-".repeat(40));
        
        try {
            // Step 1: Generate proof via workflow
            console.log("1Ô∏è‚É£ Generating proof...");
            const workflowResponse = await axios.post('http://localhost:8002/execute_workflow', {
                command: proofType.command,
                walletAddress: "0x742d35Cc6634C0532925a3b844Bc9e7595f6A3bB"
            });
            
            if (!workflowResponse.data.success) {
                throw new Error(`Workflow failed: ${workflowResponse.data.error}`);
            }
            
            console.log(`   ‚úÖ Workflow completed: ${workflowResponse.data.workflowId}`);
            
            // Extract proof ID from execution log
            const execLog = workflowResponse.data.executionLog;
            const proofIdMatch = execLog.match(/proof_[a-z]+_\d+/);
            const proofId = proofIdMatch ? proofIdMatch[0] : null;
            
            if (!proofId) {
                throw new Error("Could not extract proof ID from workflow");
            }
            
            console.log(`   ‚úÖ Proof ID: ${proofId}`);
            
            // Step 2: Check if Nova proof was generated
            const proofPath = `/home/hshadab/agentkit/proofs/${proofId}/proof.bin`;
            if (fs.existsSync(proofPath)) {
                const stats = fs.statSync(proofPath);
                console.log(`   ‚úÖ Nova proof exists: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
            } else {
                console.log(`   ‚ö†Ô∏è  Nova proof file not found at ${proofPath}`);
            }
            
            // Step 3: Check if SNARK proof can be generated
            console.log("2Ô∏è‚É£ Checking SNARK generation capability...");
            
            // Check if circuit files exist
            const circuitFiles = {
                wasm: "/home/hshadab/agentkit/build/RealProofOfProof_js/RealProofOfProof_js/RealProofOfProof.wasm",
                zkey: "/home/hshadab/agentkit/build/real_proof_of_proof_final.zkey"
            };
            
            let circuitReady = true;
            for (const [type, path] of Object.entries(circuitFiles)) {
                if (fs.existsSync(path)) {
                    console.log(`   ‚úÖ ${type.toUpperCase()} file exists`);
                } else {
                    console.log(`   ‚ùå ${type.toUpperCase()} file missing: ${path}`);
                    circuitReady = false;
                }
            }
            
            // Step 4: Check verifier contract
            console.log("3Ô∏è‚É£ Checking on-chain verifier...");
            const verifierAddress = "0x7eCe59B5e5fBEbf8761642352d70ADdCA7B38d29";
            console.log(`   ‚ÑπÔ∏è  Verifier deployed at: ${verifierAddress} (Sepolia)`);
            
            results.push({
                proofType: proofType.name,
                workflowSuccess: true,
                proofId: proofId,
                novaProofExists: fs.existsSync(proofPath),
                circuitReady: circuitReady,
                verifierDeployed: true
            });
            
        } catch (error) {
            console.error(`   ‚ùå Error: ${error.message}`);
            results.push({
                proofType: proofType.name,
                workflowSuccess: false,
                error: error.message
            });
        }
    }
    
    // Summary
    console.log("\n" + "=".repeat(60));
    console.log("üìä SUMMARY");
    console.log("=".repeat(60));
    
    for (const result of results) {
        console.log(`\n${result.proofType}:`);
        if (result.workflowSuccess) {
            console.log(`  ‚úÖ Workflow: Success`);
            console.log(`  ${result.novaProofExists ? '‚úÖ' : '‚ùå'} Nova Proof: ${result.novaProofExists ? 'Generated' : 'Missing'}`);
            console.log(`  ${result.circuitReady ? '‚úÖ' : '‚ùå'} SNARK Circuit: ${result.circuitReady ? 'Ready' : 'Not Ready'}`);
            console.log(`  ‚úÖ Verifier Contract: Deployed`);
            console.log(`  ${result.circuitReady && result.novaProofExists ? '‚úÖ' : '‚ùå'} End-to-End: ${result.circuitReady && result.novaProofExists ? 'Ready' : 'Blocked'}`);
        } else {
            console.log(`  ‚ùå Workflow: Failed - ${result.error}`);
        }
    }
    
    console.log("\nüìù Notes:");
    console.log("  - Nova proofs are generated by zkEngine (‚úÖ Working)");
    console.log("  - SNARK proofs convert Nova to Groth16 for EVM");
    console.log("  - On-chain verification requires both steps");
    console.log("  - Contract at 0x7eCe59B5e5fBEbf8761642352d70ADdCA7B38d29 handles all proof types");
}

testEndToEndVerification().catch(console.error);